{"version":3,"sources":["lib/project-services.js","components/projects/AddProject.js","components/projects/ProjectList.js","components/navbar/Navbar.js","components/projects/EditProject.js","lib/task-services.js","components/tasks/AddTask.js","components/projects/ProjectDetails.js","components/tasks/TaskDetails.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","process","projects","axios","get","concat","then","_ref","data","id","_ref2","newProject","post","_ref3","projectData","put","_ref4","delete","_ref5","AddProject","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFormSubmit","event","preventDefault","_this$state","state","title","description","project","addProject","getData","setState","catch","err","console","log","handleChange","_event$target","target","name","value","defineProperty","_this2","react_default","a","createElement","onSubmit","type","onChange","e","Component","ProjectList","listOfProjects","getAllProjects","projectAPI","projects_AddProject","map","key","_id","className","react_router_dom","to","navbar","EditProject","theProject","updateProject","history","push","tasks","projectId","taskId","task","AddTask","projectID","addTask","getTheProject","error","toggleForm","isShowing","onClick","placeholder","ProjectDetails","renderEditForm","projects_EditProject","assign","getSingleProject","renderAddTaskForm","tasks_AddTask","deleteProject","match","params","getProjectById","length","TaskDetails","getTheTask","_this$props$match$par","getTaskById","theTask","goBack","App","Navbar","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.434ee490.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = process.env.REACT_APP_API_URL;\n\n\nclass ProjectService {  \n\n  getAllProjects() {\n    return axios.get(`${baseUrl}/api/projects`)\n    .then( ({data}) => data )\n  }\n\n  getProjectById(id) {\n    return axios.get(`${baseUrl}/api/projects/${id}`)\n      .then(({data}) => data)\n  }\n\n  addProject(newProject) {\n    return axios\n    .post(`${baseUrl}/api/projects`, newProject)\n      .then(({data}) => data);\n  }\n\n  updateProject(id, projectData) {\n      return axios\n      .put(`${baseUrl}/api/projects/${id}`, projectData)\n        .then(({data}) => data);\n  } \n\n  deleteProject(id) {\n    return axios\n    .delete(`${baseUrl}/api/projects/${id}`)\n      .then(({data}) => data);\n  }\n\n}\n\nlet projects = new ProjectService();\n\nexport default projects;","// components/projects/AddProject.js\n\nimport React, { Component } from 'react';\nimport project from './../../lib/project-services'\n\nclass AddProject extends Component {\n  constructor(props){\n      super(props);\n      this.state = { title: \"\", description: \"\" };\n  }\n   \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const {title, description } = this.state;\n    \n    project.addProject({ title, description })\n      .then( () => {\n        this.props.getData();\n        this.setState({title: \"\", description: \"\"});\n      })\n      .catch( (err) => console.log(err) )\n  }\n\n\n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState( {[name]: value} );\n  }\n\n  render(){\n    return(\n      <div>\n        <form onSubmit={this.handleFormSubmit}>\n          \n          <label>Title:</label>\n          <input type=\"text\" \n            name=\"title\" \n            value={this.state.title} \n            onChange={ (e) => this.handleChange(e) }/>\n          \n          <label>Description:</label>\n          <textarea name=\"description\" \n            value={this.state.description} \n            onChange={ (e) => this.handleChange(e) } />\n          \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddProject;","// components/projects/ProjectList.js\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport projectAPI from './../../lib/project-services'\n\nimport AddProject from './AddProject'; // <== !!!\n\nclass ProjectList extends Component {\n\tstate = { \n    listOfProjects: [] \n  };\n\n  getAllProjects = () => {\n    projectAPI.getAllProjects()\n     .then((data) => {\n        this.setState({ listOfProjects: data })\n      })  \n  }\n\n  componentDidMount() {\n    //  fetch the data from API befor initial render\n    this.getAllProjects();\n  }\n\n  render() {\n    const { listOfProjects } = this.state;\n\n    return(\n      <div>         {/* After adding a projects,we will GET all projects again from API  */}\n        <AddProject getData={this.getAllProjects} />   \n        <div>\n          { \n            listOfProjects.map( (project) => {\n            return (\n              <div key={project._id} className='project'>\n                <Link to={`/projects/${project._id}`}>\n                  <h3>{project.title}</h3>\n                  <p>{project.description} </p>\n                </Link>\n              </div>\n            )})\n          }\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default ProjectList;","// components/navbar/Navbar.js\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst navbar = () => {\n  return (\n    <nav className=\"nav-style\">\n      <ul>\n        <li>\n          <Link to=\"/projects\">\n            Projects\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default navbar;","// components/projects/EditProject.js\n\nimport React, { Component } from 'react';\nimport project from './../../lib/project-services';\n\n\nclass EditProject extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      title: this.props.theProject.title, \n      description: this.props.theProject.description\n    }\n  }\n    \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { title, description } = this.state;\n    const { _id } = this.props.theProject;\n  \n    project.updateProject(_id,{ title, description })\n    .then( () => {\n      this.props.history.push('/projects');    \n    })\n     .catch( (err) => console.log(err) )\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value })\n\n  }\n\n  render(){\n    return (\n      <div>\n        <form onSubmit={this.handleFormSubmit}>\n          \n          <label>Title:</label>\n          <input type=\"text\"\n            name=\"title\" \n            value={this.state.title} \n            onChange={this.handleChange}/>\n          \n          <label>Description:</label>\n          <textarea name=\"description\" \n            value={this.state.description} \n            onChange={this.handleChange} />\n          \n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default EditProject;","import axios from 'axios';\n\nconst baseUrl = process.env.REACT_APP_API_URL;\n\nclass TaskService {  \n\n  getTaskById(projectId, taskId) {\n    return axios.get(`${baseUrl}/api/projects/${projectId}/tasks/${taskId}`)\n      .then(({data}) => data)\n  }\n\n  addTask(task) {\n    return axios.post(`${baseUrl}/api/tasks`, task)\n      .then(({data}) => data);\n  }\n\n}\n\nlet tasks = new TaskService();\n\nexport default tasks;","// components/tasks/AddTask.js\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport tasks from './../../lib/task-services'\n\nclass AddTask extends Component {\n  constructor(props){\n    super(props);\n    this.state = { title: '', description: '', isShowing: false};\n  }\n   \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { title, description } = this.state;\n    const { projectID } = this.props; \n                                                \n    tasks.addTask({ title, description, projectID })\n      .then( () => {\n        this.props.getTheProject();\n        this.setState({title: '', description: ''});\n    })\n    .catch( error => console.log(error) )\n  }\n  \n  toggleForm = () => this.setState({isShowing: !this.state.isShowing});\n\n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n\n  render(){\n    return(\n      <div>\n        <button onClick={this.toggleForm}> Add task </button>\n\n        {\n          !this.state.isShowing ?\n           null\n          :\n          (<div>\n            <form>\n              <input type=\"text\" placeholder='Title'\n                name=\"title\" value={this.state.title}\n                onChange={ (e) => this.handleChange(e)}/>\n              \n              <input name=\"description\" placeholder='Description'\n                value={this.state.description}\n                onChange={ (e) => this.handleChange(e)} />\n              \n              <button onClick={this.handleFormSubmit}>Submit</button>\n            </form>\n          </div>)\n        }\n      </div>\n    )\n  }\n}\n\nexport default AddTask;","// components/projects/ProjectDetails.js\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport EditProject from './EditProject';\nimport AddTask from './../tasks/AddTask';\nimport project from './../../lib/project-services';\n\n\nclass ProjectDetails extends Component {\n  constructor(props){\n    super(props);\n    this.state = {title: '', description: '', tasks: []};\n  }\n  \n  renderEditForm = () => {\n    /* Check if `renderEditForm` is triggered before the state gets populated. \n     If the state is empty nothing can be passed to `EditProject` as the\n    value in `theProject` prop to populate the form  */\n    if (!this.state.title && !this.state.description) return <p>LOADING</p>; \n    else {\n      return (\n        <EditProject theProject={this.state}\n          getTheProject={this.getSingleProject} \n          {...this.props} /> \n       // {...this.props}  so that we can use 'this.props.history' in EditProject  \n      )      \n    }\n  }\n\n  renderAddTaskForm = () => {\n    if(!this.state.title && !this.state.description) return  <p>LOADING</p>; \n    else {\n      return <AddTask projectID={this.state._id} getTheProject={this.getSingleProject}/>\n    }\n  }\n\n  deleteProject = () => {\n    const { id } = this.props.match.params;\n    \n    project.deleteProject(id)\n    \t.then( () => this.props.history.push('/projects') )\n    \t.catch( (err) => console.log(err));\n  }\n\n\n  componentDidMount() {\n    this.getSingleProject();\n  }\n\n  getSingleProject = () => {\n    const { id } = this.props.match.params;\n  \n    project.getProjectById(id)\n      .then( (data) =>{\n        const theProject = data;\n        this.setState(theProject);\n      })\n      .catch((err) => console.log(err));\n  }\n  \n  render() {\n    return (\n      <div>\n        <h1>{this.state.title}</h1>\n        <h4>{this.state.description}</h4>\n        <Link to={'/projects'}>\n          <button>Back</button>\n        </Link>\n\n        { this.renderEditForm() }   {/* Render the form in here */}\n        <button onClick={() => this.deleteProject()}>\n    \t    Delete project\n  \t    </button>\n\n        { this.renderAddTaskForm() }\n\n        { \n          (this.state.tasks.length === 0) ?\n          <h2>NO TASKS TO DISPLAY</h2>\n          :\n           this.state.tasks.map((task) => {\n            return(\n              <Link key={task._id} to={`/projects/${this.state._id}/tasks/${task._id}`}>\n                 <h2 className='task'>{ task.title }</h2>\n               </Link>\n            )\n            \n        })\n      }\n\n      </div>\n    )\n  }\n}\n\nexport default ProjectDetails;","// components/tasks/TaskDetails.js\n\nimport React, { Component } from 'react';\nimport tasks from './../../lib/task-services'\n\n\nclass TaskDetails extends Component {\n\tstate = {};\n\n  componentDidMount(){\n    this.getTheTask();\n  }\n\n  getTheTask = () => {\n    const { id: projectId, taskId } = this.props.match.params;\n\n    tasks.getTaskById(projectId, taskId)\n    \t.then( (theTask) => {\n      \tthis.setState(theTask);\n    })\n    .catch( (err) => console.log(err))\n  }\n\n  render(){\n    return(\n      <div>\n        <h3>TASK DETAILS</h3>\n        <h2>{this.state.title}</h2>\n        <p>{this.state.description}</p>\n\n        {/* To go back we can use react-router-dom method `history.goBack()` available on `props` object */}\n        <button onClick={this.props.history.goBack} >Go Back</button>\n      </div>\n    )\n  }\n}\n\nexport default TaskDetails;","//\tsrc/App.js\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\n\nimport ProjectList from './components/projects/ProjectList';\nimport Navbar from './components/navbar/Navbar';\nimport ProjectDetails from './components/projects/ProjectDetails';\nimport TaskDetails from './components/tasks/TaskDetails'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar />\n\n        <Switch>\n          <Route exact path=\"/projects\" component={ProjectList}/>\n          <Route exact path=\"/projects/:id\" component={ProjectDetails} />\n          <Route exact path=\"/projects/:id/tasks/:taskId\" component={TaskDetails} /> \n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render((\n<Router> \n    <App />\n</Router> \n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}